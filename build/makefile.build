#/*
# *  ::718604!
# * 
# * Copyright(C) November 20, 2014 U.S. Food and Drug Administration
# * Authors: Dr. Vahan Simonyan (1), Dr. Raja Mazumder (2), et al
# * Affiliation: Food and Drug Administration (1), George Washington University (2)
# * 
# * All rights Reserved.
# * 
# * The MIT License (MIT)
# * 
# * Permission is hereby granted, free of charge, to any person obtaining
# * a copy of this software and associated documentation files (the "Software"),
# * to deal in the Software without restriction, including without limitation
# * the rights to use, copy, modify, merge, publish, distribute, sublicense,
# * and/or sell copies of the Software, and to permit persons to whom the
# * Software is furnished to do so, subject to the following conditions:
# * 
# * The above copyright notice and this permission notice shall be included
# * in all copies or substantial portions of the Software.
# * 
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# * DEALINGS IN THE SOFTWARE.
# */

define run-qapp
    pushd . >/dev/null; \
    if test -s ~/bin/qapp.cfg ; then \
        cd ~/bin; \
    fi; \
    if test -z "$(call sh-escape,$4)" ; then true; \
        echo "$(devdir)/$(rname)/bin/qapp -resourceSet $1 $2 $3" >/dev/tty; \
        $(devdir)/$(rname)/bin/qapp logLevel -1 -resourceSet $1 $2 $3 || exit $$?; \
    else \
        echo "$(devdir)/$(rname)/bin/qapp $(call sh-escape,$4) $1 $2 $3" >/dev/tty; \
        $(devdir)/$(rname)/bin/qapp logLevel -1 $4 $1 $2 $3 || exit $$?; \
    fi; \
    popd >/dev/null
endef

define qp-sql
    if ! test -s "$1" ; then true; \
        echo "File not found or empty `pwd` '$1'"; \
        exit 2; \
    fi; \
    echo "Using $(HIVE_DB) $(HIVE_DB_USER)@$(HIVE_DB_HOST):$(HIVE_DB_PORT)"; \
    mariadb -N --comments -h $(HIVE_DB_HOST) -P$(HIVE_DB_PORT) -u $(HIVE_DB_USER) -p$(HIVE_DB_PWD) $(HIVE_DB) < $1 || exit 55
endef

define dist-site-check
    if [[ -n "$(INSTALLING)" && -n "$(SITES)" ]]; then \
        DST=`echo "$(strip $(INSTALLING))" | tr A-Z a-z`; \
        LST=`echo "$(SITES) all" | tr A-Z a-z`; \
        match=0; \
        for f in $${LST}; do \
            NOT=1; \
            if [[ "$${f:0:1}" == '!' ]]; then \
                f=$${f:1}; \
                NOT=0; \
            fi; \
            n="^$${f/./\.}$$"; \
            g="[^\.]$${f/./\.}$$"; \
            d="[^\.]$${DST/./\.}$$"; \
            if [[ $${DST} =~ $${n} ]]; then \
                match=$${NOT}; \
            elif [[ $${DST} =~ $${g} ]]; then \
                match=$${NOT}; \
            elif [[ $${f} =~ $${d} ]]; then \
                match=$${NOT}; \
            fi; \
        done; \
        if [[ $${match} -eq 0 ]]; then \
            echo "SITE $(INSTALLING) is skipped"; \
            exit 0; \
        fi; \
    fi
endef

define dist-service-register
    @$(call dist-site-check); \
    echo "Registering service \"$1\" \"$2\" \"$3\""; \
    if test "$1" = "" ; then \
        echo "Service name is missing"; \
        exit 2; \
    fi; \
    cat $(devdir)/build/dist_start.sql > $(TMPDIR)tmp-$$$$.sql || exit 1; \
    echo -n "CALL tmp_QPSvc_add('$1', '$2', '$3', '" >> $(TMPDIR)tmp-$$$$.sql  || exit 1; \
    $(foreach p,$4,echo -n "$(if $(findstring =,$p),$(comma),$(space))$(subst ','',$p)">> $(TMPDIR)tmp-$$$$.sql || exit 1;) \
    echo "');" >> $(TMPDIR)tmp-$$$$.sql || exit 1; \
    cat $(devdir)/build/dist_end.sql >> $(TMPDIR)tmp-$$$$.sql || exit 1; \
    $(call qp-sql,$(TMPDIR)tmp-$$$$.sql); \
    rm $(TMPDIR)tmp-$$$$.sql; \
    $(call run-qapp,$1,,,-resourceDel); \
    if ! test "$1" = "qm" ; then \
        $(call dist-service-set-config-int,$1,); \
    fi
endef

define dist-service-set-config
    @$(call dist-site-check); \
    $(call dist-service-set-config-int,$1,$2)
endef

define dist-service-set-config-int
    if ! test "$2" = "" ; then \
        echo "Setting conguration for service \"$1\""; \
    fi; \
    if test "$1" = "" ; then \
        echo "Service name is missing"; \
        exit 2; \
    fi; \
    cat $(devdir)/build/dist_start.sql > $(TMPDIR)tmp-$$$$.sql || exit 1; \
    echo -n "CALL tmp_QPSvc_set_config('$1', '" >> $(TMPDIR)tmp-$$$$.sql || exit 1; \
    $(foreach p,$2,echo -en "$(if $(findstring =,$p),$(comma),$(space))$(subst ','',$p)">> $(TMPDIR)tmp-$$$$.sql || exit 1;) \
    echo "');" >> $(TMPDIR)tmp-$$$$.sql || exit 1; \
    cat $(devdir)/build/dist_end.sql >> $(TMPDIR)tmp-$$$$.sql || exit 1; \
    $(call qp-sql,$(TMPDIR)tmp-$$$$.sql); \
    rm $(TMPDIR)tmp-$$$$.sql
endef

define dist-service-set-config-path
    @$(call dist-site-check); \
    echo "Setting path attributes for \"$1.$2\""; \
    if test "$1" = "" ; then \
        echo "Service name is missing"; \
        exit 2; \
    fi; \
    if test "$2" = "" ; then \
        echo "Parameter name is missing"; \
        exit 2; \
    fi; \
    cat $(devdir)/build/dist_start.sql > $(TMPDIR)tmp-$$$$.sql || exit 1; \
    echo -n "CALL tmp_QPSvc_set_config_path('$1', '$2', '$3', '$4');" >> $(TMPDIR)tmp-$$$$.sql || exit 1; \
    cat $(devdir)/build/dist_end.sql >> $(TMPDIR)tmp-$$$$.sql || exit 1; \
    $(call qp-sql,$(TMPDIR)tmp-$$$$.sql); \
    rm $(TMPDIR)tmp-$$$$.sql
endef

ifneq ($(adoption),)
define dist-adoption
    @$(call dist-site-check); \
    if test -f "$(adoption_build)/$3" ; then \
        $(call dist-app-build-internal,$1,$2,$(adoption_build)/$3); \
    else \
        echo "ERROR: Skipped missing adoption file $3"; \
    fi
endef
else
define dist-adoption
    @echo "WARNING: adoption not present, disting file \"$3\" skipped"
endef
endif

define dist-src
    @$(call dist-site-check); \
    $(call dist-app-build-internal,$1,$2,$(srcdir)/$3)
endef

define dist-qry
    @$(call dist-site-check); \
    echo -n "$3" > $(TMPDIR)tmp-$$$$.qry || exit 1; \
    $(call dist-app-build-internal,$1,query://$2,$(TMPDIR)tmp-$$$$.qry); \
    rm -f $(TMPDIR)tmp-$$$$.qry || exit 1
endef

define dist-link
    @$(call dist-site-check); \
    lnknm=$3; \
    if test "$$lnknm" = "" ; then \
        lnknm="$1.os$(SLIB_PLATFORM)"; \
    fi; \
    rm -f $(bindir)/`basename $$lnknm .os$(SLIB_PLATFORM)`; \
    ln -sv `basename $2 .os$(SLIB_PLATFORM)` $(bindir)/`basename $$lnknm .os$(SLIB_PLATFORM)`; \
    $(call run-qapp,$1,\\-\>$$lnknm,content://$2)
endef

define dist-app
    @$(call dist-site-check); \
    rnm=$3; \
    if test "$$rnm" = "" ; then \
        rnm="$1.os$(SLIB_PLATFORM)"; \
    fi; \
    $(call dist-app-build-internal,$1,$$rnm,$(bindir)/$2)
endef

define dist-lib
    @$(call dist-site-check); \
    rnm=$3; \
    if test "$$rnm" = "" ; then \
        rnm="$2"; \
    fi; \
    $(call dist-app-build-internal,$1,$$rnm,$(libdir)/$2)
endef

define dist-app-build-internal
    echo "$3" | grep '^content://' 1>/dev/null 2>&1; \
    is_ctn=$$?; \
    echo "$3" | grep '\.so[\.0-9]*$$' 1>/dev/null 2>&1; \
    is_so=$$?; \
    if test "$$is_ctn" = "1" -a ! -e "$3" ; then \
        echo "File not found '$3'"; \
        exit 2; \
    elif test "$$is_so" = "0" ; then \
        so_unsuffixed_len=`echo -n "$3" | wc -m`; \
        so_unsuffixed_len=`expr $$so_unsuffixed_len + 1`; \
        for so in $3*; do \
            so_suffix=`echo -n $$so | cut -c $$so_unsuffixed_len-`; \
            lnk=`readlink -n $$so`; \
            if test "$$lnk" = "" ; then \
                $(call run-qapp,$1,$2$$so_suffix,$$so); \
            else \
                so_basename=`basename "$3"`; \
                so_unsuffixed_base_len=`echo -n "$$so_basename" | wc -m`; \
                so_unsuffixed_base_len=`expr $$so_unsuffixed_base_len + 1`; \
                lnk_tgt_suffix=`echo -n $$lnk | cut -c $$so_unsuffixed_base_len-`; \
                $(call run-qapp,$1,\\-\>$2$$so_suffix,content://$2$$lnk_tgt_suffix); \
            fi; \
        done; \
    else \
        $(call run-qapp,$1,$2,$3); \
    fi
endef

define prop-export-json
    $(call run-qapp,'$2',,>"$(srcdir)/$1",-flatten -excludeProp created modified -user qapp -exportJson);
endef

define prop-export-json-noids
    $(call run-qapp,'$2',,>"$(srcdir)/$1",-flatten -excludeProp created modified -upsert auto -user qapp -exportJson);
endef

define prop-export-json-noid-qry
    $(call run-qapp,'$2',,>"$(srcdir)/$1",-flatten -excludeProp created modified -upsert qry -user qapp -exportJson);
endef

define prop-import-json
    @$(call dist-site-check); \
    $(call prop-import-json-internal,$1,$2)
endef

define prop-import-json-internal
    if ! test -z "$(INSTALLING)" ; then true; \
        xff="$(srcdir)/$1"; \
        if ! test -s $${xff} ; then true; \
            xff="/tmp/empty.$$$$.json"; \
            echo '{}' > $${xff}; \
        fi; \
        if ! test -z "$(call sh-escape,$2)" ; then true; \
            $(call run-qapp,$${xff},,,-user qapp -updateList '$2' -propJson); \
        else \
            $(call run-qapp,$${xff},,,-user qapp -propJson); \
        fi; \
    fi;
endef

define prop-export-types
    @$(foreach typ,$(OBJECT_TYPES),\
        $(call prop-export-json,type_$(typ).json,query://append(split("$(typ)", [" ","\r","\n","\t"]).filter({this!=""}).map({alloftype("^type$$",{name:this})})).reduce(function(a,b){a.append(b)}))\
    )
endef

define prop-import-types
    @$(call dist-site-check); \
    $(foreach typ,$(OBJECT_TYPES), \
        $(call prop-import-json-internal,type_$(typ).json) \
    )
endef

define prop-export-menuitems
    @if ! test -z "$(MENUITEMS)" ; then true; \
        $(call prop-export-json-noids,menuitems.json,query://alloftype("^menuitem$$",{path:["$(subst $(space),"$(comma)",$(MENUITEMS))"]})) \
    fi;
endef

define prop-import-menuitems
    @$(call dist-site-check); \
    if ! test -z "$(MENUITEMS)" ; then true; \
        $(call prop-import-json-internal,menuitems.json,query://alloftype("^menuitem$$",{path:["$(subst $(space),"$(comma)",$(MENUITEMS))"]})) \
    fi;
endef

define prop-export-actions
    @if ! test -z "$(ACTIONS)" ; then true; \
        $(call prop-export-json-noids,actions.json,query://alloftype("^action$$",{name:["$(subst $(space),"$(comma)",$(ACTIONS))"]})) \
    fi;
endef

define prop-import-actions
    @$(call dist-site-check); \
    if ! test -z "$(ACTIONS)" ; then true; \
        $(call prop-import-json-internal,actions.json,query://alloftype("^action$$",{name:["$(subst $(space),"$(comma)",$(ACTIONS))"]})) \
    fi;
endef

define prop-export-apps
    @if ! test -z "$(APPS)" ; then true;\
        $(call prop-export-json-noids,apps.json,query://alloftype("^user_app_base$$",{base_app_name:["$(subst $(space),"$(comma)",$(APPS))"]}))\
    fi;
endef

define prop-import-apps
    @$(call dist-site-check); \
    if ! test -z "$(APPS)" ; then true;\
        $(call prop-import-json-internal,apps.json,query://b=[];c=[];["$(subst $(space),"$(comma)",$(APPS))"].foreach({a=this;b=a.split(":");alloftype("^user_app_base$$+").filter({.base_app_name==b[0]}).filter({.base_app_version==b[1]}).foreach({c.append([this])});});return c;)\
    fi;
endef

define prop-import-object
    @$(call dist-site-check); \
    if ! test -z "$(call sh-escape,$2)" ; then true; \
        $(call run-qapp,$(srcdir)/$1,,,-user qapp -updateList '$2' -propJson); \
    else \
        $(call run-qapp,$(srcdir)/$1,,,-user qapp -propJson); \
    fi;
endef

define dist-build-hivepack
    @$(call dist-site-check); \
    cd $(hpdir); \
    $(devdir)/build/image-build.sh -q -d $(srcdir) -n "$1:$2" "$3"
endef
